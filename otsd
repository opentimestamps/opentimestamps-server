#!/usr/bin/env python3
# Copyright (C) 2016-2018 The OpenTimestamps developers
#
# This file is part of the OpenTimestamps Server.
#
# It is subject to the license terms in the LICENSE file found in the top-level
# directory of this distribution.
#
# No part of the OpenTimestamps Server, including this file, may be copied,
# modified, propagated, or distributed except according to the terms contained
# in the LICENSE file.

import argparse
import logging
import logging.handlers
import os
import queue
import sys
import threading
import time

import bitcoin
import bitcoin.core
from bitcoin.wallet import CBitcoinAddress

import otsserver.calendar
import otsserver.rpc
import otsserver.stamper

import opentimestamps.calendar

parser = argparse.ArgumentParser(description="OpenTimestamps Server")

parser.add_argument("-q", "--quiet", action="count", default=0,
                    help="Be more quiet.")
parser.add_argument("-v", "--verbose", action="count", default=0,
                    help="Be more verbose. Both -v and -q may be used multiple times.")
parser.add_argument("-c", "--calendar", type=str,
                    dest='calendar_path',
                    default='~/.otsd/calendar',
                    help="Location of the calendar (default: '%(default)s')")

parser.add_argument("--debug-file", type=str,
                    dest='debug_file',
                    default='~/.otsd/debug.log',
                    help="Location of the debug log")
parser.add_argument("--debug-file-max-size", type=int,
                    dest='debug_file_max_size',
                    default=10000000,
                    help="Max size of the debug log (default: %(default)d bytes) ")
parser.add_argument("--debug-file-backup-count", type=int,
                    dest='debug_file_backup_count',
                    default=10,
                    help="Number of debug log file backups (default: %(default)d bytes) ")
parser.add_argument("--debug-file-gmtime", action="store_true",
                    dest='debug_file_gmtime',
                    help="Use GMT/UTC time instead of local time in debug log file")

parser.add_argument("--rpc-port", type=int,
                    default=14788,
                    help="RPC port (default: %(default)d)")
parser.add_argument("--rpc-address", type=str,
                    default='localhost',
                    help="RPC address (default: %(default)s)")

parser.add_argument("--lightning-invoice-file", type=str,
                    help="file containing a lightning invoice without amount for donations")

parser.add_argument("--explorer-url", type=str,
                    default='https://mempool.space',
                    help="block explorer URL to use in the status page")

parser.add_argument("--max-pending", type=int,
                    default=100000,
                    help="Maximum number of pending commitments to timestamp at a time (default: %(default)s)")

parser.add_argument("--btc-min-relay-feerate", metavar='FEERATE', type=float,
                    default=1,
                    help="Minimum relay feerate (default: %(default).1f sat/vB)")
parser.add_argument("--btc-conf-target", metavar='N', type=int,
                    default=1008,
                    help="Confirmation target for the first timestamp transaction (will be RBF-replaced if not mined)"
                         " (default: %(default)d)")
parser.add_argument("--btc-min-confirmations", metavar='N', type=int,
                    default=6,
                    help="Confirmations required before we save a Bitcoin timestamp permanently, must be greater than 1"
                         " (default: %(default)d)")
parser.add_argument("--btc-min-tx-interval", metavar='SECONDS', type=int,
                    default=60*60*6,
                    help="Minimum interval between timestamp transactions (default: %(default)d seconds)")
parser.add_argument("--btc-max-fee", metavar='FEE', type=float,
                    default=0.001,
                    help="Maximum transaction fee (default: %(default).3f BTC)")
parser.add_argument("--btc-full-rbf", action='store_true',
                    default=False,
                    help="Do full-RBF replacements")
parser.add_argument("--upstream", type=str,
                    help="Calling another upstream server for timestamping, while performing a transaction by itself if the upstream is not available")

parser.add_argument("--upstream-timeout", type=int, default=100,
                    help="If the upstream don't upgrade after the timeout, proceed timestamping by its own")

btc_net_group = parser.add_mutually_exclusive_group()
btc_net_group.add_argument('--btc-testnet', dest='btc_net', action='store_const',
                           const='testnet', default='mainnet',
                           help='Use Bitcoin testnet rather than mainnet')
btc_net_group.add_argument('--btc-regtest', dest='btc_net', action='store_const',
                           const='regtest',
                           help='Use Bitcoin regtest rather than mainnet')

args = parser.parse_args()
args.parser = parser

directory = os.path.expanduser("~/.otsd")
if not os.path.exists(directory):
    os.makedirs(directory)

debugfile = os.path.expanduser(args.debug_file)
handler = logging.handlers.RotatingFileHandler(filename=debugfile, maxBytes=args.debug_file_max_size, backupCount=args.debug_file_backup_count)
fmt = logging.Formatter("%(asctime)-15s %(message)s")
handler.setFormatter(fmt)
logger = logging.getLogger('')
logger.addHandler(handler)
ch = logging.StreamHandler(sys.stdout)
logger.addHandler(ch)

if args.debug_file_gmtime:
    logging.Formatter.converter = time.gmtime

args.verbosity = args.verbose - args.quiet

if args.verbosity == 0:
    logging.root.setLevel(logging.INFO)
elif args.verbosity > 0:
    logging.root.setLevel(logging.DEBUG)
elif args.verbosity == -1:
    logging.root.setLevel(logging.WARNING)
elif args.verbosity < -1:
    logging.root.setLevel(logging.ERROR)

if args.btc_net == 'testnet':
    bitcoin.SelectParams('testnet')
elif args.btc_net == 'regtest':
    bitcoin.SelectParams('regtest')

if not (1 <= args.btc_conf_target <= 1008):
    args.parser.error("--btc-conf-target must be in range 1 <= N <= 1008")

exit_event = threading.Event()

calendar_path = os.path.expanduser(args.calendar_path)

with open(calendar_path + '/donation_addr', "r") as fd:
    donation_address = fd.read().rstrip()
    donation_address = CBitcoinAddress(donation_address)

calendar = otsserver.calendar.Calendar(calendar_path)
aggregator = otsserver.calendar.Aggregator(calendar, exit_event)
upstream_calendar = None
upstream_aggregator = None

if args.upstream:
    upstream_calendar = opentimestamps.calendar.RemoteCalendar(args.upstream,
                                                  user_agent="OpenTimestamps-Server/%s" % otsserver.__version__)
    upstream_aggregator = otsserver.calendar.UpstreamAggregator(upstream_calendar, calendar, exit_event, upstream_timeout=args.upstream_timeout)

stamper = otsserver.stamper.Stamper(calendar, exit_event,
                                    args.btc_conf_target,
                                    args.btc_min_relay_feerate,
                                    args.btc_min_confirmations,
                                    args.btc_min_tx_interval,
                                    args.btc_max_fee * bitcoin.core.COIN,
                                    args.btc_full_rbf,
                                    args.max_pending)

calendar.stamper = stamper

server = otsserver.rpc.StampServer((args.rpc_address, args.rpc_port),
                                   aggregator,
                                   calendar,
                                   args.lightning_invoice_file,
                                   donation_address,
                                   args.explorer_url,
                                   upstream_aggregator=upstream_aggregator,
                                   upstream_calendar=upstream_calendar)

try:
    server.serve_forever()
except KeyboardInterrupt:
    exit_event.set()
    sys.exit(0)

# vim:syntax=python filetype=python
