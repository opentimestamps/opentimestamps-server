#!/usr/bin/env python3
# Copyright (C) 2016 The OpenTimestamps developers
#
# This file is part of the OpenTimestamps Server.
#
# It is subject to the license terms in the LICENSE file found in the top-level
# directory of this distribution.
#
# No part of the OpenTimestamps Server, including this file, may be copied,
# modified, propagated, or distributed except according to the terms contained
# in the LICENSE file.

import argparse
import logging
import logging.handlers
import os
import queue
import sys
import threading

import bitcoin
import bitcoin.core

from bitcoin.core import x
from bitcoin.core.script import CScript

import otsserver.calendar
import otsserver.rpc
import otsserver.stamper

parser = argparse.ArgumentParser(description="OpenTimestamps Server")

parser.add_argument("-q", "--quiet", action="count", default=0,
                    help="Be more quiet.")
parser.add_argument("-v", "--verbose", action="count", default=0,
                    help="Be more verbose. Both -v and -q may be used multiple times.")
parser.add_argument("-c", "--calendar", type=str,
                    dest='calendar_path',
                    default='~/.otsd/calendar',
                    help="Location of the calendar (default: '%(default)s')")

parser.add_argument("--debug-file", type=str,
                    dest='debug_file',
                    default='~/.otsd/debug.log',
                    help="Location of the debug log")
parser.add_argument("--debug-file-max-size", type=int,
                    dest='debug_file_max_size',
                    default=10000000,
                    help="Max size of the debug log (default: %(default)d bytes) ")

parser.add_argument("--rpc-port", type=int,
                    default=14788,
                    help="RPC port (default: %(default)d)")
parser.add_argument("--rpc-address", type=str,
                    default='localhost',
                    help="RPC address (default: %(default)s)")

parser.add_argument("--max-pending", type=int,
                    default=100000,
                    help="Maximum number of pending commitments to timestamp at a time (default: %(default)s)")

parser.add_argument("--btc-min-relay-feerate", metavar='FEEPERKB', type=float,
                    default=0.00001,
                    help="Minimum relay feerate (default: %(default).6f BTC/KB)")
parser.add_argument("--btc-min-confirmations", metavar='N', type=int,
                    default=6,
                    help="Confirmations required before we save a Bitcoin timestamp permanently, must be greater than 1 (default: %(default)d)")
parser.add_argument("--btc-min-tx-interval", metavar='SECONDS', type=int,
                    default=600,
                    help="Minimum interval between timestamp transactions (default: %(default)d seconds)")
parser.add_argument("--btc-max-fee", metavar='FEE', type=float,
                    default=0.001,
                    help="Maximum transaction fee (default: %(default).3f BTC)")
parser.add_argument("--btc-change-script", metavar='HEX', type=str,
                    default=None,
                    help="Script to use for change output")

btc_net_group = parser.add_mutually_exclusive_group()
btc_net_group.add_argument('--btc-testnet', dest='btc_net', action='store_const',
                           const='testnet', default='mainnet',
                           help='Use Bitcoin testnet rather than mainnet')
btc_net_group.add_argument('--btc-regtest', dest='btc_net', action='store_const',
                           const='regtest',
                           help='Use Bitcoin regtest rather than mainnet')

args = parser.parse_args()
args.parser = parser

directory = os.path.expanduser("~/.otsd")
if not os.path.exists(directory):
    os.makedirs(directory)

debugfile = os.path.expanduser(args.debug_file)
handler = logging.handlers.RotatingFileHandler(filename=debugfile, maxBytes=args.debug_file_max_size)
fmt = logging.Formatter("%(asctime)-15s %(message)s")
handler.setFormatter(fmt)
logger = logging.getLogger('')
logger.addHandler(handler)
ch = logging.StreamHandler(sys.stdout)
logger.addHandler(ch)

args.verbosity = args.verbose - args.quiet

if args.verbosity == 0:
    logging.root.setLevel(logging.INFO)
elif args.verbosity > 0:
    logging.root.setLevel(logging.DEBUG)
elif args.verbosity == -1:
    logging.root.setLevel(logging.WARNING)
elif args.verbosity < -1:
    logging.root.setLevel(logging.ERROR)

if args.btc_net == 'testnet':
    bitcoin.SelectParams('testnet')
elif args.btc_net == 'regtest':
    bitcoin.SelectParams('regtest')


exit_event = threading.Event()

calendar_path = os.path.expanduser(args.calendar_path)

calendar = otsserver.calendar.Calendar(calendar_path)
aggregator = otsserver.calendar.Aggregator(calendar, exit_event)

if args.btc_change_script is not None:
    args.btc_change_script = CScript(x(args.btc_change_script))

stamper = otsserver.stamper.Stamper(calendar, exit_event,
                                    args.btc_min_relay_feerate / 1000 * bitcoin.core.COIN,
                                    args.btc_min_confirmations,
                                    args.btc_min_tx_interval,
                                    args.btc_max_fee * bitcoin.core.COIN,
                                    args.max_pending,
                                    args.btc_change_script)

calendar.stamper = stamper

server = otsserver.rpc.StampServer((args.rpc_address, args.rpc_port), aggregator, calendar)
try:
    server.serve_forever()
except KeyboardInterrupt:
    exit_event.set()
    sys.exit(0)

# vim:syntax=python filetype=python
